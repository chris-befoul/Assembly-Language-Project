Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/12/21 12:44:40
:Designing low-level I/O procedures    (Proj6_hardisoc.asm   Page 1 - 1


				TITLE Designing low-level I/O procedures    (Proj6_hardisoc.asm)

				; ; Author: Chris Hardison
				; Last Modified:	3/12/2021
				; OSU email address: hardisoc@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:       6          Due Date:	3/14/2021 
				; Description: A program using macros to complete I/O procedures utilzing string primitives. The user inputs
				;				ten integers which are put into an array which is then outputted
				;				along with the sum an average. 

				INCLUDE Irvine32.INC
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Calls ReadString to obtain input from user.
				;
				; Preconditions: None
				;
				; Receives:
				; prompt = string primitive
				; count = SIZEOF prompt
				;
				; returns: 
				; prompt = ReadString from user
				; count	=  SIZEOF prompt
				; ---------------------------------------------------------------------------------
				mGetString	MACRO prompt, count	
					PUSH		EDX
					PUSH		ECX
					MOV			EDX, prompt
					MOV			ECX, count
					CALL 		ReadString
					POP			ECX
					POP			EDX
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Calls WriteString to output input from user.
				;
				; Preconditions: Valid input from user
				;
				; Receives:
				; string_num = string primitive
				;
				; Returns: 
				; None
				; ---------------------------------------------------------------------------------
				mDisplayString	MACRO	string_num
					PUSH		EDX
					MOV			EDX, string_num
					CALL		WriteString
					POP			EDX
				ENDM

				; Constants
 = 0000000A				user_count = 10					; Represents the number of possible valid inputs by user

 00000000			.data

 00000000 50 52 4F 47 52		title_prompt			BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures",0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   00
 0000003D 57 72 69 74 74		author_prompt			BYTE	"Written by: Chris Hardison",0
	   65 6E 20 62 79
	   3A 20 43 68 72
	   69 73 20 48 61
	   72 64 69 73 6F
	   6E 00
 00000058 50 6C 65 61 73		rules1					BYTE	"Please provide 10 signed decimal integers.",0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 00
 00000083 45 61 63 68 20		rules2					BYTE	"Each number needs to be small enough to fit inside a 32 bit register.",0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 00
 000000C9 41 66 74 65 72		rules3					BYTE	"After you have finished inputting the raw numbers I will display a list",0
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 00
 00000111 6F 66 20 74 68		rules4					BYTE	"of the integers, their sum, and their average value.",0
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 00
 00000146 50 6C 65 61 73		user_prompt				BYTE	"Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000165 45 52 52 4F 52		error_prompt			BYTE	"ERROR: You did not enter an signed number or your number was too big.",0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 20 6F 72 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 00
 000001AB 50 6C 65 61 73		retry_prompt			BYTE	"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 000001BE 59 6F 75 20 65		list_prompt				BYTE	"You entered the following numbers:",0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 00
 000001E1 2C 20 00			num_seperate			BYTE	", ", 0
 000001E4 54 68 65 20 73		sum_prompt				BYTE	"The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000202 54 68 65 20 61		average_prompt			BYTE	"The average is: ",0
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 00000213 54 68 61 6E 6B		farewell				BYTE	"Thanks for playing!",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00
 00000227  0000000A [			user_numbers			SDWORD	10 DUP(0)					
	    00000000
	   ]
 0000024F 00000000			user_sum				SDWORD	?							; Represents the sum of valid inputs
 00000253 00000000			user_average			SDWORD	?							; Represents the average of valid inputs
 00000257  000000FF [			user_string				BYTE	255 DUP (0)
	    00
	   ]
 00000356  00000020 [			user_temp				BYTE	32 DUP (?)
	    00
	   ]

 00000000			.code
 00000000			main PROC

				; Print title, author, and rules to console
					mDisplayString	OFFSET title_prompt
 00000000  52		     1		PUSH		EDX
 00000001  BA 00000000 R     1		MOV			EDX, OFFSET title_prompt
 00000006  E8 00000000 E     1		CALL		WriteString
 0000000B  5A		     1		POP			EDX
 0000000C  E8 00000000 E		CALL	CrLf
					mDisplayString	OFFSET author_prompt
 00000011  52		     1		PUSH		EDX
 00000012  BA 0000003D R     1		MOV			EDX, OFFSET author_prompt
 00000017  E8 00000000 E     1		CALL		WriteString
 0000001C  5A		     1		POP			EDX
 0000001D  E8 00000000 E		CALL	CrLf
 00000022  E8 00000000 E		CALL	CrLf
					mDisplayString	OFFSET rules1
 00000027  52		     1		PUSH		EDX
 00000028  BA 00000058 R     1		MOV			EDX, OFFSET rules1
 0000002D  E8 00000000 E     1		CALL		WriteString
 00000032  5A		     1		POP			EDX
 00000033  E8 00000000 E		CALL	CrLf
					mDisplayString	OFFSET rules2
 00000038  52		     1		PUSH		EDX
 00000039  BA 00000083 R     1		MOV			EDX, OFFSET rules2
 0000003E  E8 00000000 E     1		CALL		WriteString
 00000043  5A		     1		POP			EDX
 00000044  E8 00000000 E		CALL	CrLf
					mDisplayString	OFFSET rules3
 00000049  52		     1		PUSH		EDX
 0000004A  BA 000000C9 R     1		MOV			EDX, OFFSET rules3
 0000004F  E8 00000000 E     1		CALL		WriteString
 00000054  5A		     1		POP			EDX
 00000055  E8 00000000 E		CALL	CrLf
					mDisplayString	OFFSET rules4
 0000005A  52		     1		PUSH		EDX
 0000005B  BA 00000111 R     1		MOV			EDX, OFFSET rules4
 00000060  E8 00000000 E     1		CALL		WriteString
 00000065  5A		     1		POP			EDX
 00000066  E8 00000000 E		CALL	CrLf
 0000006B  E8 00000000 E		CALL	CrLf

				; Sets registers for prompt_user LOOP
 00000070  B9 0000000A			MOV		ECX, user_count
 00000075  BF 00000227 R		MOV		EDI, OFFSET user_numbers

				; Prompt the user for signed integer input
 0000007A			prompt_user:

					mDisplayString	OFFSET user_prompt
 0000007A  52		     1		PUSH		EDX
 0000007B  BA 00000146 R     1		MOV			EDX, OFFSET user_prompt
 00000080  E8 00000000 E     1		CALL		WriteString
 00000085  5A		     1		POP			EDX

				; Push address (prompt) of user_string onto the stack to be used in ReadVal procedure
 00000086  68 000001AB R		PUSH	OFFSET retry_prompt
 0000008B  68 00000165 R		PUSH	OFFSET error_prompt
 00000090  68 00000257 R		PUSH	OFFSET user_string
 00000095  68 000000FF			PUSH	SIZEOF user_string
 0000009A  E8 000000D3			CALL	ReadVal

				; Iterate to the next slot in the array
 0000009F  A1 00000257 R		MOV		EAX, SDWORD PTR user_string
 000000A4  89 07			MOV		[EDI], EAX
 000000A6  83 C7 04			ADD		EDI, 4									

				; Continue prompt_user LOOP if inputs < user_count
 000000A9  E2 CF			LOOP	prompt_user
 000000AB  E8 00000000 E		CALL	CrLf

				; Set registers for sum_finder LOOP
 000000B0  B9 0000000A			MOV		ECX, user_count
 000000B5  BE 00000227 R		MOV		ESI, OFFSET user_numbers
 000000BA  BB 00000000			MOV		EBX, 0					

				; Print to console list_prompt using mDisplayString macro
					mDisplayString	OFFSET list_prompt
 000000BF  52		     1		PUSH		EDX
 000000C0  BA 000001BE R     1		MOV			EDX, OFFSET list_prompt
 000000C5  E8 00000000 E     1		CALL		WriteString
 000000CA  5A		     1		POP			EDX
 000000CB  E8 00000000 E		CALL			CrLf

				; Calculate the user_sum and output the number to the user
 000000D0			sum_finder:
 000000D0  8B 06			MOV		EAX, [ESI]
 000000D2  03 D8			ADD		EBX, EAX				; Adding number in EAX to user_sum total in EBX

				; Push parameters in EAX and in user_temp onto the stack to be used in WriteVal procedure
 000000D4  50				PUSH	EAX
 000000D5  68 00000356 R		PUSH	OFFSET user_temp
 000000DA  E8 0000015A			CALL	WriteVal
 000000DF  83 F9 01			CMP		ECX, 1					; Checking to see if the last number will be printed
 000000E2  74 0C			JE		last_input
					mDisplayString	OFFSET num_seperate
 000000E4  52		     1		PUSH		EDX
 000000E5  BA 000001E1 R     1		MOV			EDX, OFFSET num_seperate
 000000EA  E8 00000000 E     1		CALL		WriteString
 000000EF  5A		     1		POP			EDX

 000000F0			last_input:

 000000F0  83 C6 04			ADD		ESI, 4					; Iterate to the next number
 000000F3  E2 DB			LOOP	sum_finder
 000000F5  E8 00000000 E		CALL	CrLf

				; Output the user_sum to the user
 000000FA  8B C3			MOV			EAX, EBX
 000000FC  A3 0000024F R		MOV			user_sum, EAX
					mDisplayString	OFFSET sum_prompt
 00000101  52		     1		PUSH		EDX
 00000102  BA 000001E4 R     1		MOV			EDX, OFFSET sum_prompt
 00000107  E8 00000000 E     1		CALL		WriteString
 0000010C  5A		     1		POP			EDX

				; Push user_sum and user_temp onto the stack to be utilized by WriteVal procedure
 0000010D  FF 35 0000024F R		PUSH	user_sum
 00000113  68 00000356 R		PUSH	OFFSET user_temp
 00000118  E8 0000011C			CALL	WriteVal
 0000011D  E8 00000000 E		CALL	CrLf
					
				; Set EDX to zero and set EBX to user_count to be utilzied for calculating user_average
 00000122  BB 0000000A			MOV		EBX, user_count
 00000127  BA 00000000			MOV		EDX, 0
 0000012C  99				CDQ

				; Divide the user_sum by user_count (using IDIV to allow for signed integers)
 0000012D  F7 FB			IDIV		EBX

				; Determine if user_average needs to be rounded down
					;MOV		ECX, EAX
					;MOV		EAX, EDX
					;MOV		EDX, 2
					;IMUL	EDX
					;CMP		EAX, EBX
					;MOV		EAX, ECX
 0000012F  A3 00000253 R		MOV		user_average, EAX
					mDisplayString	OFFSET average_prompt
 00000134  52		     1		PUSH		EDX
 00000135  BA 00000202 R     1		MOV			EDX, OFFSET average_prompt
 0000013A  E8 00000000 E     1		CALL		WriteString
 0000013F  5A		     1		POP			EDX

				; Push parameters user_average and user_temp | Call WriteVal

 00000140  FF 35 00000253 R		PUSH	user_average
 00000146  68 00000356 R		PUSH	OFFSET user_temp
 0000014B  E8 000000E9			CALL	WriteVal
 00000150  E8 00000000 E		CALL	CrLf
 00000155  E8 00000000 E		CALL	CrLf
					
				; Display goodbye message

					mDisplayString	OFFSET farewell
 0000015A  52		     1		PUSH		EDX
 0000015B  BA 00000213 R     1		MOV			EDX, OFFSET farewell
 00000160  E8 00000000 E     1		CALL		WriteString
 00000165  5A		     1		POP			EDX
 00000166  E8 00000000 E		CALL	CrLf

					exit		; exit to operating system
 0000016B  6A 00	   *	    push   +000000000h
 0000016D  E8 00000000 E   *	    call   ExitProcess
 00000172			main ENDP

 00000172			ReadVal PROC
					LOCAL sign_holder:SDWORD

 00000172  55		   *	    push   ebp
 00000173  8B EC	   *	    mov    ebp, esp
 00000175  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000178  55				PUSH	EBP
 00000179  8B EC			MOV		EBP, ESP

 0000017B  60				PUSHAD
 0000017C  83 C5 08			ADD		EBP, 8

 0000017F			initialize:
 0000017F  8B 55 0C			MOV		EDX, [EBP + 12]	; prompt to the user_string variable
 00000182  8B 4D 08			MOV		ECX, [EBP + 8]	; size of user_string pushed to ECX register so it is tracked

				; Read the input from the user

					mGetString	EDX, ECX
 00000185  52		     1		PUSH		EDX
 00000186  51		     1		PUSH		ECX
 00000187  8B D2	     1		MOV			EDX, EDX
 00000189  8B C9	     1		MOV			ECX, ECX
 0000018B  E8 00000000 E     1		CALL 		ReadString
 00000190  59		     1		POP			ECX
 00000191  5A		     1		POP			EDX
 00000192  83 F8 00			CMP			EAX, 0
 00000195  74 65			JE			_invalid

				; Initialize the registers
 00000197  8B F2			MOV		ESI, EDX
 00000199  B8 00000000			MOV		EAX, 0
 0000019E  B9 00000000			MOV		ECX, 0

				; Loading the string incrementally

 000001A3			start:
 000001A3  AC				LODSB					; loads from memory at ESI
 000001A4  66| 83 F8 00			CMP		AX, 0			; check to see if the string has terminated
 000001A8  74 79			JE		last_step
 000001AA  8B DA			MOV		EBX, EDX
 000001AC  43				INC		EBX
 000001AD  3B F3			CMP		ESI, EBX
 000001AF  74 1C			JE		sign_check

				; Check the range if char is a digit in ASCII
 000001B1			validate:
 000001B1  66| 83 F8 30			CMP		AX, 48				; ASCII code 48 relates to the zero (0) digit
 000001B5  7C 45			JL		_invalid
 000001B7  66| 83 F8 39			CMP		AX, 57				; ASCII code 57 relates to the nine (9) digit
 000001BB  7F 3F			JG		_invalid

				; Adjust for value of digit

 000001BD  BB 0000000A			MOV		EBX, 10
 000001C2  66| 83 E8 30			SUB		AX, 48
 000001C6  91				XCHG	EAX, ECX
 000001C7  F7 EB			IMUL	EBX				; multiply by 10 for correct digit place
 000001C9  72 31			JC		_invalid
 000001CB  73 51			JNC		_valid

 000001CD			sign_check:
 000001CD  66| 83 F8 2D			CMP		AX, 45
 000001D1  74 17			JE		negative
 000001D3  C7 45 FC			MOV		sign_holder, 0
	   00000000
 000001DA  7F D5			JG		validate
					

 000001DC  66| 83 F8 2B			CMP		AX, 43
 000001E0  7C 1A			JL		_invalid
 000001E2  74 0F			JE		positive

 000001E4  66| 83 F8 2C			CMP		AX, 44
 000001E8  74 12			JE		_invalid

 000001EA			negative:
 000001EA  C7 45 FC			MOV		sign_holder, 1
	   00000001
 000001F1  EB B0			JMP		start
					

 000001F3			positive:
 000001F3  C7 45 FC			MOV		sign_holder, 0
	   00000000
 000001FA  EB A7			JMP		start


 000001FC			_invalid:

 000001FC  8B 55 10			MOV		EDX, [EBP +16]
					mDisplayString	EDX
 000001FF  52		     1		PUSH		EDX
 00000200  8B D2	     1		MOV			EDX, EDX
 00000202  E8 00000000 E     1		CALL		WriteString
 00000207  5A		     1		POP			EDX
 00000208  E8 00000000 E		CALL	CrLf
 0000020D  8B 55 14			MOV		EDX, [EBP + 20]
					mDisplayString	EDX
 00000210  52		     1		PUSH		EDX
 00000211  8B D2	     1		MOV			EDX, EDX
 00000213  E8 00000000 E     1		CALL		WriteString
 00000218  5A		     1		POP			EDX

 00000219  E9 FFFFFF61			JMP		initialize

 0000021E			_valid:

 0000021E  03 C1			ADD		EAX, ECX
 00000220  91				XCHG	EAX, ECX		; Swap references in the two registers
 00000221  EB 80			JMP		start	; Continue parsing
					

 00000223			last_step:
 00000223  91				XCHG	ECX, EAX
 00000224  83 7D FC 01			CMP		sign_holder, 1
 00000228  74 02			JE		neg_num
 0000022A  EB 02			JMP		finished

 0000022C			neg_num:
 0000022C  F7 D8			NEG		EAX

 0000022E			finished:
 0000022E  A3 00000257 R		MOV		SDWORD PTR user_string, EAX	; Save int in passed variable
 00000233  61				POPAD
 00000234  5D				POP EBP

 00000235  C9		   *	    leave  
 00000236  C2 0014			RET 20

 00000239			ReadVal ENDP


 00000239			WriteVal PROC
					LOCAL	place_holder:SDWORD
					
 00000239  55		   *	    push   ebp
 0000023A  8B EC	   *	    mov    ebp, esp
 0000023C  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000023F  55				PUSH	EBP
 00000240  8B EC			MOV		EBP, ESP
 00000242  60				PUSHAD		; save the registers by pushing them onto the stack

				; Initialize the LOOP to read the inputted number
 00000243  83 C5 08			ADD		EBP, 8
 00000246  8B 45 0C			MOV		EAX, [EBP + 12]	; move integer value in stack to EAX register
 00000249  8B 7D 08			MOV		EDI, [EBP + 8]	; move prompt to EDI to store the output string
 0000024C  BB 0000000A			MOV		EBX, 10
 00000251  6A 00			PUSH	0
 00000253  85 C0			TEST	EAX, EAX
 00000255  78 3C			JS		neg_num
 00000257  EB 00			JMP		stringify

 00000259			stringify:

 00000259  BA 00000000			MOV		EDX, 0
 0000025E  F7 FB			IDIV	EBX
 00000260  83 C2 30			ADD		EDX, 48
 00000263  52				PUSH	EDX

				; Check if at end

 00000264  83 F8 00			CMP		EAX, 0
 00000267  75 F0			JNE		stringify
 00000269  74 1C			JE		convert_neg

				; Pop numbers off the stack

 0000026B			next_num:

 0000026B  8F 07			POP		[EDI]
 0000026D  8B 07			MOV		EAX, [EDI]
 0000026F  47				INC		EDI
 00000270  83 F8 00			CMP		EAX, 0				; check if the end
 00000273  75 F6			JNE		next_num

				; Output as string using the macro mDisplayString

 00000275  8B 55 08			MOV				EDX, [EBP + 8]
					mDisplayString	EDX
 00000278  52		     1		PUSH		EDX
 00000279  8B D2	     1		MOV			EDX, EDX
 0000027B  E8 00000000 E     1		CALL		WriteString
 00000280  5A		     1		POP			EDX

 00000281  61				POPAD
 00000282  5D				POP EBP

 00000283  C9		   *	    leave  
 00000284  C2 000C			RET 12

 00000287			convert_neg:
 00000287  83 7D FC 2D			CMP		place_holder, 45
 0000028B  75 DE			JNE		next_num
 0000028D  8B 55 FC			MOV		EDX, place_holder
 00000290  52				PUSH	EDX
 00000291  EB D8			JMP		next_num

 00000293			neg_num:
 00000293  F7 D8			NEG		EAX
 00000295  C7 45 FC			MOV		place_holder, 45
	   0000002D
 0000029C  EB BB			JMP		stringify


 0000029E			WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/12/21 12:44:40
:Designing low-level I/O procedures    (Proj6_hardisoc.asm   Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000376 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000029E Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000172 _TEXT	Length= 000000C7 Public STDCALL
  sign_holder  . . . . . . . . .	DWord	 bp - 00000004
  initialize . . . . . . . . . .	L Near	 0000017F _TEXT	
  start  . . . . . . . . . . . .	L Near	 000001A3 _TEXT	
  validate . . . . . . . . . . .	L Near	 000001B1 _TEXT	
  sign_check . . . . . . . . . .	L Near	 000001CD _TEXT	
  negative . . . . . . . . . . .	L Near	 000001EA _TEXT	
  positive . . . . . . . . . . .	L Near	 000001F3 _TEXT	
  _invalid . . . . . . . . . . .	L Near	 000001FC _TEXT	
  _valid . . . . . . . . . . . .	L Near	 0000021E _TEXT	
  last_step  . . . . . . . . . .	L Near	 00000223 _TEXT	
  neg_num  . . . . . . . . . . .	L Near	 0000022C _TEXT	
  finished . . . . . . . . . . .	L Near	 0000022E _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000239 _TEXT	Length= 00000065 Public STDCALL
  place_holder . . . . . . . . .	DWord	 bp - 00000004
  stringify  . . . . . . . . . .	L Near	 00000259 _TEXT	
  next_num . . . . . . . . . . .	L Near	 0000026B _TEXT	
  convert_neg  . . . . . . . . .	L Near	 00000287 _TEXT	
  neg_num  . . . . . . . . . . .	L Near	 00000293 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000172 Public STDCALL
  prompt_user  . . . . . . . . .	L Near	 0000007A _TEXT	
  sum_finder . . . . . . . . . .	L Near	 000000D0 _TEXT	
  last_input . . . . . . . . . .	L Near	 000000F0 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
author_prompt  . . . . . . . . .	Byte	 0000003D _DATA	
average_prompt . . . . . . . . .	Byte	 00000202 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error_prompt . . . . . . . . . .	Byte	 00000165 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell . . . . . . . . . . . .	Byte	 00000213 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list_prompt  . . . . . . . . . .	Byte	 000001BE _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
num_seperate . . . . . . . . . .	Byte	 000001E1 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
retry_prompt . . . . . . . . . .	Byte	 000001AB _DATA	
rules1 . . . . . . . . . . . . .	Byte	 00000058 _DATA	
rules2 . . . . . . . . . . . . .	Byte	 00000083 _DATA	
rules3 . . . . . . . . . . . . .	Byte	 000000C9 _DATA	
rules4 . . . . . . . . . . . . .	Byte	 00000111 _DATA	
sum_prompt . . . . . . . . . . .	Byte	 000001E4 _DATA	
title_prompt . . . . . . . . . .	Byte	 00000000 _DATA	
user_average . . . . . . . . . .	DWord	 00000253 _DATA	
user_count . . . . . . . . . . .	Number	 0000000Ah   
user_numbers . . . . . . . . . .	DWord	 00000227 _DATA	
user_prompt  . . . . . . . . . .	Byte	 00000146 _DATA	
user_string  . . . . . . . . . .	Byte	 00000257 _DATA	
user_sum . . . . . . . . . . . .	DWord	 0000024F _DATA	
user_temp  . . . . . . . . . . .	Byte	 00000356 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
